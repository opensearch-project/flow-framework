# This template creates a connectors to Claude v1 model on Bedrock
#
# It then creates tools in the Agent Framework to create a query assist agent.
#
# To use:
#  - update the "credential" fields under the create_claude_connector node.
#  - if needed, update region and endpoint
#
# After provisioning:
#  - returns a workflow ID
#  - use the status API to get the deployed model IDs and agent IDs
#  - use those models and agents to create a chat experience
---
name: Query Assist Agent
description: Create a Query Assist Agent using Claude on BedRock
use_case: REGISTER_AGENT
version:
  template: 1.0.0
  compatibility:
  - 2.13.0
  - 3.0.0
workflows:
  provision:
    user_params: {}
    nodes:
    # This node (workflow step) creates the connector to the Claude model on Bedrock.
    # To use a different model, you can update this node.
    # Be sure to enter your keys/token in the credentials section, and change the region and endpoint if applicable.
    - id: create_claude_connector
      type: create_connector
      previous_node_inputs: {}
      user_inputs:
        version: '1'
        name: Claude instant runtime Connector
        protocol: aws_sigv4
        description: The connector to BedRock service for Claude model
        actions:
        - headers:
            x-amz-content-sha256: required
            content-type: application/json
          method: POST
          request_body: '{"prompt":"${parameters.prompt}", "max_tokens_to_sample":${parameters.max_tokens_to_sample},
            "temperature":${parameters.temperature},  "anthropic_version":"${parameters.anthropic_version}"
            }'
          action_type: predict
          url: https://bedrock-runtime.us-west-2.amazonaws.com/model/anthropic.claude-instant-v1/invoke
        credential:
          access_key: "<YOUR_ACCESS_KEY>"
          secret_key: "<YOUR_SECRET_KEY>"
          session_token: "<YOUR_SESSION_TOKEN>"
        parameters:
          region: us-west-2
          endpoint: bedrock-runtime.us-west-2.amazonaws.com
          content_type: application/json
          auth: Sig_V4
          max_tokens_to_sample: '8000'
          service_name: bedrock
          temperature: '0.0001'
          response_filter: "$.completion"
          anthropic_version: bedrock-2023-05-31
    # This node registers the connector in the previous step and loads it into memory.
    # The resulting model_id can be used later when configuring the agents to use this model.
    - id: register_claude_model
      type: register_remote_model
      previous_node_inputs:
        create_claude_connector: connector_id
      user_inputs:
        description: Claude model
        deploy: true
        name: claude-instant
        # Guardrails can filter the input and output to the model.
        guardrails:
          # The type is presently unused but required. Any string works here.
          type: local_regex
          input_guardrail:
            stop_words:
            - index_name: words0
              source_fields:
              - title
            regex:
            - regex1
            - regex2
          output_guardrail:
            stop_words:
            - index_name: words0
              source_fields:
              - title
            regex:
            - regex1
            - regex2
    # The next node uses the model_id generated from the previous node in tools for the Agent Framework
    - id: TransferQuestionToPPLAndExecuteTool
      type: create_tool
      previous_node_inputs:
        register_claude_model: model_id
      user_inputs:
        type: PPLTool
        name: TransferQuestionToPPLAndExecuteTool
        description: 'Use this tool to transfer natural language to generate PPL and
          execute PPL to query inside. Use this tool after you know the index name,
          otherwise, call IndexRoutingTool first. The input parameters are: {index:IndexName,
          question:UserQuestion}'
        parameters:
          response_filter: "$.completion"
          execute: false
        include_output_in_agent_response: true
    # This tool is presently unused in this template. Add it to the Agent to be used.
    - id: summarize_success_tool
      type: create_tool
      previous_node_inputs:
        register_claude_model: model_id
      user_inputs:
        type: MLModelTool
        Name: SummarizeSuccessTool
        description: Use this tool to summarize a PPL success response in query assist
        parameters:
          prompt: |2-


            Human: You will be given a search response, summarize it as a concise paragraph while considering the following:
            User's question on index '${parameters.index}': ${parameters.question}
            PPL (Piped Processing Language) query used: ${parameters.query}

            Give some documents to support your point.
            Note that the output could be truncated, summarize what you see. Don't mention about total items returned and don't mention about the fact that output is truncated if you see 'Output is too long, truncated' in the response.

            Skip the introduction; go straight into the summarization.

            Use the following pieces of context to answer the users question.
            If you don't know the answer, just say that you don't know, don't try to make up an answer.
            ----------------
            ${parameters.response}

            Assistant:
          response_filter: "$.completion"
    # This tool is presently unused in this template. Add it to the Agent to be used.
    - id: summarize_error_tool
      type: create_tool
      previous_node_inputs:
        register_claude_model: model_id
      user_inputs:
        type: MLModelTool
        name: SummarizeErrorTool
        description: Use this tool to summarize a PPL error response in query assist
        include_output_in_agent_response: true
        parameters:
          prompt: |2-


            Human: You will be given an API response with errors, summarize it as a concise paragraph. Do not try to answer the user's question.
            If the error cannot be fixed, eg. no such field or function not supported, then give suggestions to rephrase the question.
            It is imperative that you must not give suggestions on how to fix the error or alternative PPL query, or answers to the question.

            Consider the following:
            User's question on index '${parameters.index}': ${parameters.question}
            PPL (Piped Processing Language) query used: ${parameters.query}

            Skip the introduction; go straight into the summarization.

            Use the following pieces of context to answer the users question.
            If you don't know the answer, just say that you don't know, don't try to make up an answer.
            ----------------
            ${parameters.response}

            Assistant:
          response_filter: "$.completion"
    # This tool is presently unused in this template. Add it to the Agent to be used.
    - id: suggestions_tool
      type: create_tool
      previous_node_inputs:
        register_claude_model: model_id
      user_inputs:
        type: MLModelTool
        name: SuggestionsTool
        description: Use this tool to generate possible questions for an index in
          query assist
        include_output_in_agent_response: true
        parameters:
          prompt: |2-


            Human: OpenSearch index: ${parameters.index}

            Recommend 2 or 3 possible questions on this index given the fields below. Only give the questions, do not give descriptions of questions and do not give PPL queries.

            The format for a field is
            ```
            - field_name: field_type (sample field value)
            ```

            Fields:
            ${parameters.fields}

            Put each question in a <question> tag.

            Assistant:
          response_filter: "$.completion"
    # This is the Flow Agent that uses the TransferQuestionToPPLAndExecuteTool
    # To use more tools, add them in a new tools_order field under user_inputs
    - id: ppl_agent
      type: register_agent
      previous_node_inputs:
        TransferQuestionToPPLAndExecuteTool: tools
      user_inputs:
        parameters: {}
        app_type: query_assist
        name: PPL agent
        description: this is the PPL agent
        type: flow
        # Uncomment if you want to add more tools. Order matters for flow agent.
        # tools_order:
        # - TransferQuestionToPPLAndExecuteTool
        # - add other tools here in order
