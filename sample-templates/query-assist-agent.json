{
  "name": "Query Assist Agent",
  "description": "Create a Query Assist Agent using Bedrock and Sagemaker models",
  "use_case": "REGISTER_AGENT",
  "version": {
    "template": "1.0.0",
    "compatibility": [
      "2.12.0",
      "3.0.0"
    ]
  },
  "workflows": {
    "provision": {
      "nodes": [
        {
          "id": "create_openai_connector",
          "type": "create_connector",
          "user_inputs": {
            "name": "OpenAI Chat Connector",
            "description": "The connector to public OpenAI model service for GPT 3.5",
            "version": "1",
            "protocol": "http",
            "parameters": {
              "endpoint": "api.openai.com",
              "model": "gpt-3.5-turbo"
            },
            "credential": {
              "openAI_key": "PUT_YOUR_API_KEY_HERE"
            },
            "actions": [
              {
                "action_type": "predict",
                "method": "POST",
                "url": "https://${parameters.endpoint}/v1/chat/completions"
              }
            ]
          }
        },
        {
          "id": "register_openai_model",
          "type": "register_remote_model",
          "previous_node_inputs": {
            "create_openai_connector": "connector_id"
          },
          "user_inputs": {
            "name": "openAI-gpt-3.5-turbo",
            "deploy": true
          }
        },
        {
          "id": "TransferQuestionToPPLAndExecuteTool",
          "type": "create_tool",
          "previous_node_inputs": {
            "register_openai_model": "model_id"
          },
          "user_inputs": {
            "type": "PPLTool",
            "name": "TransferQuestionToPPLAndExecuteTool",
            "description": "Use this tool to transfer natural language to generate PPL and execute PPL to query inside. Use this tool after you know the index name, otherwise, call IndexRoutingTool first. The input parameters are: {index:IndexName, question:UserQuestion}",
            "parameters": {
              "response_filter": "$.completion",
              "execute": false,
              "model_type": "openai"
            },
            "include_output_in_agent_response": true
          }
        },
        {
          "id": "ppl_agent",
          "type": "register_agent",
          "previous_node_inputs": {
            "TransferQuestionToPPLAndExecuteTool": "tools"
          },
          "user_inputs": {
            "parameters": {
            },
            "app_type": "query_assist",
            "name": "PPL agent",
            "description": "this is the PPL agent",
            "type": "flow"
          }
        },
        {
          "id": "summarize_success_tool",
          "type": "create_tool",
          "previous_node_inputs": {
            "register_openai_model": "model_id"
          },
          "user_inputs": {
            "type": "MLModelTool",
            "Name": "SummarizeSuccessTool",
            "description": "Use this tool to summarize a PPL success response in query assist",
            "parameters": {
              "prompt": "\n\nHuman: You will be given a search response, summarize it as a concise paragraph while considering the following:\nUser's question on index '${parameters.index}': ${parameters.question}\nPPL (Piped Processing Language) query used: ${parameters.query}\n\nGive some documents to support your point.\nNote that the output could be truncated, summarize what you see. Don't mention about total items returned and don't mention about the fact that output is truncated if you see 'Output is too long, truncated' in the response.\n\nSkip the introduction; go straight into the summarization.\n\nUse the following pieces of context to answer the users question.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n${parameters.response}\n\nAssistant:",
              "response_filter": "$.completion"
            }
          }
        },
        {
          "id": "response_summary_agent",
          "type": "register_agent",
          "previous_node_inputs": {
            "summarize_success_tool": "tools"
          },
          "user_inputs": {
            "parameters": {
            },
            "app_type": "query_assist",
            "name": "Response summary agent",
            "description": "this is the summarize success PPL response agent",
            "type": "flow"
          }
        },
        {
          "id": "summarize_error_tool",
          "type": "create_tool",
          "previous_node_inputs": {
            "register_openai_model": "model_id"
          },
          "user_inputs": {
            "type": "MLModelTool",
            "name": "SummarizeErrorTool",
            "description": "Use this tool to summarize a PPL error response in query assist",
            "include_output_in_agent_response": true,
            "parameters": {
              "prompt": "\n\nHuman: You will be given an API response with errors, summarize it as a concise paragraph. Do not try to answer the user's question.\nIf the error cannot be fixed, eg. no such field or function not supported, then give suggestions to rephrase the question.\nIt is imperative that you must not give suggestions on how to fix the error or alternative PPL query, or answers to the question.\n\nConsider the following:\nUser's question on index '${parameters.index}': ${parameters.question}\nPPL (Piped Processing Language) query used: ${parameters.query}\n\nSkip the introduction; go straight into the summarization.\n\nUse the following pieces of context to answer the users question.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n${parameters.response}\n\nAssistant:",
              "response_filter": "$.completion"
            }
          }
        },
        {
          "id": "suggestions_tool",
          "type": "create_tool",
          "previous_node_inputs": {
            "register_openai_model": "model_id"
          },
          "user_inputs": {
            "type": "MLModelTool",
            "name": "SuggestionsTool",
            "description": "Use this tool to generate possible questions for an index in query assist",
            "include_output_in_agent_response": true,
            "parameters": {
              "prompt": "\n\nHuman: OpenSearch index: ${parameters.index}\n\nRecommend 2 or 3 possible questions on this index given the fields below. Only give the questions, do not give descriptions of questions and do not give PPL queries.\n\nThe format for a field is\n```\n- field_name: field_type (sample field value)\n```\n\nFields:\n${parameters.fields}\n\nPut each question in a <question> tag.\n\nAssistant:",
              "response_filter": "$.completion"
            }
          }
        },
        {
          "id": "error_summary_agent",
          "type": "register_agent",
          "previous_node_inputs": {
            "summarize_error_tool": "tools",
            "suggestions_tool": "tools"
          },
          "user_inputs": {
            "parameters": {
            },
            "app_type": "query_assist",
            "name": "Error summary agent",
            "description": "this is the agent for summarizing PPL error and give suggested questions",
            "tools_order": [
              "summarize_error_tool",
              "suggestions_tool"
            ],
            "type": "flow"
          }
        },
        {
          "id": "ppl_agent_tool",
          "type": "create_tool",
          "previous_node_inputs": {
            "ppl_agent": "agent_id"
          },
          "user_inputs": {
            "description": "PPL Agent Tool",
            "include_output_in_agent_response": true,
            "type": "AgentTool",
            "parameters": {
              "max_iteration": "5"
            },
            "name": "PPLAgentTool"
          }
        },
        {
          "id": "response_summary_agent_tool",
          "type": "create_tool",
          "previous_node_inputs": {
            "response_summary_agent": "agent_id"
          },
          "user_inputs": {
            "description": "Response Summary Agent Tool",
            "include_output_in_agent_response": true,
            "type": "AgentTool",
            "parameters": {
              "max_iteration": "5"
            },
            "name": "ResponseSummaryPPLAgentTool"
          }
        },
        {
          "id": "error_summary_agent_tool",
          "type": "create_tool",
          "previous_node_inputs": {
            "error_summary_agent": "agent_id"
          },
          "user_inputs": {
            "description": "Error Summary Agent Tool",
            "include_output_in_agent_response": true,
            "type": "AgentTool",
            "parameters": {
              "max_iteration": "5"
            },
            "name": "ErrorSummaryAgentTool"
          }
        },
        {
          "id": "root_agent",
          "type": "register_agent",
          "previous_node_inputs": {
            "ppl_agent_tool": "tools",
            "response_summary_agent_tool": "tools",
            "error_summary_agent_tool": "tools",
            "register_openai_model": "model_id"
          },
          "user_inputs": {
            "parameters": {
              "prompt": "Answer the question as best you can."
            },
            "app_type": "chatbot",
            "name": "Root agent",
            "description": "this is the root agent",
            "tools_order": [
              "ppl_agent_tool",
              "response_summary_agent_tool",
              "error_summary_agent_tool"
            ],
            "memory": {
              "type": "conversation_index"
            },
            "type": "flow"
          }
        }
      ]
    }
  }
}
