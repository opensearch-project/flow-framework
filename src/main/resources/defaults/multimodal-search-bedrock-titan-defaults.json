{
    "template.name": "multimodal_search_with_bedrock_titan",
    "template.description": "Setting up multimodal search with Amazon Bedrock Titan embedding model deployment",
    "create_connector.name": "Amazon Bedrock Connector: multi-modal embedding",
    "create_connector.description": "The connector to bedrock Titan multi-modal embedding model",
    "create_connector.region": "us-east-1",
    "create_connector.input_docs_processed_step_size": "2",
    "create_connector.endpoint": "api.openai.com",
    "create_connector.credential.access_key": "123",
    "create_connector.credential.secret_key": "123",
    "create_connector.credential.session_token": "123",
    "create_connector.actions.url": "https://bedrock-runtime.us-east-1.amazonaws.com/model/amazon.titan-embed-image-v1/invoke",
    "create_connector.actions.request_body": "{ \"inputText\": \"${parameters.inputText:-null}\", \"inputImage\": \"${parameters.inputImage:-null}\" }",
    "create_connector.actions.pre_process_function": "\n    StringBuilder parametersBuilder = new StringBuilder(\"{\");\n    if (params.text_docs.length > 0 && params.text_docs[0] != null) {\n      parametersBuilder.append(\"\\\"inputText\\\":\");\n      parametersBuilder.append(\"\\\"\");\n      parametersBuilder.append(params.text_docs[0]);\n      parametersBuilder.append(\"\\\"\");\n      \n      if (params.text_docs.length > 1 && params.text_docs[1] != null) {\n        parametersBuilder.append(\",\");\n      }\n    }\n    \n    \n    if (params.text_docs.length > 1 && params.text_docs[1] != null) {\n      parametersBuilder.append(\"\\\"inputImage\\\":\");\n      parametersBuilder.append(\"\\\"\");\n      parametersBuilder.append(params.text_docs[1]);\n      parametersBuilder.append(\"\\\"\");\n    }\n    parametersBuilder.append(\"}\");\n    \n    return  \"{\" +\"\\\"parameters\\\":\" + parametersBuilder + \"}\";",
    "create_connector.actions.post_process_function": "\n      def name = \"sentence_embedding\";\n      def dataType = \"FLOAT32\";\n      if (params.embedding == null || params.embedding.length == 0) {\n          return null;\n      }\n      def shape = [params.embedding.length];\n      def json = \"{\" +\n                 \"\\\"name\\\":\\\"\" + name + \"\\\",\" +\n                 \"\\\"data_type\\\":\\\"\" + dataType + \"\\\",\" +\n                 \"\\\"shape\\\":\" + shape + \",\" +\n                 \"\\\"data\\\":\" + params.embedding +\n                 \"}\";\n      return json;\n    ",
    "register_remote_model.name": "Bedrock multi-modal embedding model",
    "register_remote_model.description": "bedrock-multi-modal-embedding-model",
    "create_ingest_pipeline.pipeline_id": "nlp-multimodal-ingest-pipeline",
    "create_ingest_pipeline.description": "A text/image embedding pipeline",
    "text_image_embedding.embedding": "vector_embedding",
    "text_image_embedding.field_map.text": "image_description",
    "text_image_embedding.field_map.image": "image_binary",
    "create_index.name": "my-multimodal-nlp-index",
    "create_index.settings.number_of_shards": "2",
    "text_image_embedding.field_map.output.dimension": "1024",
    "create_index.mappings.method.engine": "lucene",
    "create_index.mappings.method.name": "hnsw"
}
